DROP TABLE student;
CREATE TABLE student (
stuid NUMBER(1),
name VARCHAR2(15),
gender VARCHAR2(1),
birthyear NUMBER(4),
degree VARCHAR(3),
subjects_passed NUMBER(1),
PRIMARY KEY(stuid)
);

INSERT INTO student VALUES(1,'Fred','M',1991,'BIT',0);
INSERT INTO student VALUES(2,'Sue','F',1993,'ICT',4);
INSERT INTO student VALUES(3,'Emma','F',1992,'BIS',2);
INSERT INTO student VALUES(4,'Dave','M',1993,'BIT',4);
INSERT INTO student VALUES(5,'Leah','F',1991,'ICT',6);
INSERT INTO student VALUES(6,'Linda','F',1991,'BIS',6);
INSERT INTO student VALUES(7,'Harry','M',1992,'BIS',4);

1.
find the minimum colum values for a large number of rows in a table

2.
1

3.
SELECT COUNT(stuid) FROM student

4.
SELECT COUNT(stuid) FROM student WHERE gender='F';

5.
SELECT COUNT(stuid) 
FROM student 
WHERE gender='F' OR gender='M'
GROUP BY gender

6.
SELECT degree,COUNT(stuid)
FROM student 
GROUP BY degree

7.
SELECT degree,COUNT(stuid)
FROM student 
GROUP BY degree
HAVING COUNT(stuid)<=2

8.
SELECT degree,AVG(subjects_passed) 
FROM student
GROUP BY degree

9.
a.
empno,taskno

b.
2

c.
EMPLOYEE(empno,employeename) PRIMARY KEY(empno);
ALLOCATION(empno,taskno)PRIMARY KEY(empno,taskno) FOREIGN KEY(empno) REFERENCES employee FOREIGN KEY(taskno) REFERENCES task;
TASK(taskno,description)PRIMARY KEY(taskno);

DROP TABLE allocation;
DROP TABLE employee;
DROP TABLE task;


CREATE TABLE employee(
empno NUMBER(3),
employeename VARCHAR(255),
PRIMARY KEY(empno)
);

CREATE TABLE task (
taskno NUMBER(3),
description VARCHAR(255),
PRIMARY KEY(taskno)
);

CREATE TABLE allocation (
empno NUMBER(3),
taskno NUMBER(3),
FOREIGN KEY(empno) REFERENCES employee,
FOREIGN KEY(taskno) REFERENCES task
);



INSERT INTO employee VALUES(1,'Jim Black');
INSERT INTO employee VALUES(2,'Perry White');
INSERT INTO task VALUES(1,'Bake Cake');
INSERT INTO task VALUES(2,'Chop onions');
INSERT INTO allocation VALUES(1,2);
INSERT INTO allocation VALUES(2,1);

10.
suburb: suburbname
house: houseno,streetno,suburbname
builder: buildercode

11.
a.
yes: officesize cannot be null

b.
no

LAB QUESTIONS =================================================================================
movie>actor>casting

1. 304
DESCRIBE moviecolour;
DESCRIBE movie;
DESCRIBE rating;
DESCRIBE actor;
DESCRIBE casting;

SELECT M.movieno, M.title, C.colourname, R.longdesc
FROM movie M
INNER JOIN 
moviecolour C
ON M.colour_code = C.colour_code
INNER JOIN rating R
ON M.rating_code = R.rating_code


2. 74
SELECT M.movieno, M.title, C.colourname, R.longdesc
FROM movie M
INNER JOIN 
moviecolour C
ON M.colour_code = C.colour_code
INNER JOIN rating R
ON M.rating_code = R.rating_code
WHERE relyear >= 2003 AND relyear <=200

3. 15
SELECT COUNT(*) FROM movie WHERE relyear=2005

4. 94
SELECT COUNT(*) FROM movie WHERE relyear>=2010 AND relyear<=2015

5. 81
SELECT COUNT(*) FROM movie WHERE rating_code='PG'

6.
SELECT rating_code,COUNT(rating_code)
FROM movie
GROUP BY rating_code

7.
SELECT rating_code,COUNT(rating_code)
FROM movie
GROUP BY rating_code
ORDER BY COUNT(rating_code) DESC

8.
SELECT rating_code AS "movie rating code",COUNT(rating_code) AS total
FROM movie
GROUP BY rating_code
ORDER BY COUNT(rating_code) DESC

9. 47
SELECT relyear,MAX(imdb_score)
FROM movie
GROUP BY relyear
ORDER BY relyear DESC

10.
done

11. 297
SELECT * FROM ACTOR
WHERE bornin='USA'

12.
SELECT COUNT(bornin) FROM ACTOR
WHERE bornin='USA'

13.
SELECT COUNT(bornin) FROM ACTOR
WHERE bornin='AUS'

14.
SELECT COUNT(bornin) FROM ACTOR
WHERE bornin=''

15. 0
SELECT COUNT(bornin) FROM ACTOR
WHERE birthdate IS NULL

16. 26
SELECT bornin,COUNT(bornin)
FROM actor
GROUP BY bornin

17. 26
SELECT bornin,COUNT(bornin)
FROM actor
GROUP BY bornin
ORDER BY bornin DESC

18. 39
SELECT bornin,gender,COUNT(*)
FROM actor
GROUP BY bornin,gender
ORDER BY bornin,gender


19.
 